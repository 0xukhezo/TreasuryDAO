/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
  } from "ethers";
  import type {
    FunctionFragment,
    Result,
    EventFragment,
  } from "@ethersproject/abi";
  import type { Listener, Provider } from "@ethersproject/providers";
  import type {
    TypedEventFilter,
    TypedEvent,
    TypedListener,
    OnEvent,
    PromiseOrValue,
  } from "./common";
  
  export interface GovHelperInterface extends utils.Interface {
    functions: {
      "borrowSwap(address,uint256,address,uint256,uint256,address,uint24,uint24)": FunctionFragment;
      "owner()": FunctionFragment;
      "poolAddressProvider()": FunctionFragment;
      "priceFeedUsdc()": FunctionFragment;
      "renounceOwnership()": FunctionFragment;
      "swapRepay(address,uint256,address,uint24,uint24,address,uint256)": FunctionFragment;
      "swapRouter()": FunctionFragment;
      "transferOwnership(address)": FunctionFragment;
    };
  
    getFunction(
      nameOrSignatureOrTopic:
        | "borrowSwap"
        | "owner"
        | "poolAddressProvider"
        | "priceFeedUsdc"
        | "renounceOwnership"
        | "swapRepay"
        | "swapRouter"
        | "transferOwnership"
    ): FunctionFragment;
  
    encodeFunctionData(
      functionFragment: "borrowSwap",
      values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ]
    ): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(
      functionFragment: "poolAddressProvider",
      values?: undefined
    ): string;
    encodeFunctionData(
      functionFragment: "priceFeedUsdc",
      values?: undefined
    ): string;
    encodeFunctionData(
      functionFragment: "renounceOwnership",
      values?: undefined
    ): string;
    encodeFunctionData(
      functionFragment: "swapRepay",
      values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
      ]
    ): string;
    encodeFunctionData(
      functionFragment: "swapRouter",
      values?: undefined
    ): string;
    encodeFunctionData(
      functionFragment: "transferOwnership",
      values: [PromiseOrValue<string>]
    ): string;
  
    decodeFunctionResult(functionFragment: "borrowSwap", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "poolAddressProvider",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "priceFeedUsdc",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "renounceOwnership",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "swapRepay", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "swapRouter", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "transferOwnership",
      data: BytesLike
    ): Result;
  
    events: {
      "NaturalPositionClosed(address,uint256,address)": EventFragment;
      "NaturalPositionCreated(address,uint256,address,uint256,uint256,int256)": EventFragment;
      "OwnershipTransferred(address,address)": EventFragment;
    };
  
    getEvent(nameOrSignatureOrTopic: "NaturalPositionClosed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "NaturalPositionCreated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  }
  
  export interface NaturalPositionClosedEventObject {
    tokenIn: string;
    amountIn: BigNumber;
    borrowToken: string;
  }
  export type NaturalPositionClosedEvent = TypedEvent<
    [string, BigNumber, string],
    NaturalPositionClosedEventObject
  >;
  
  export type NaturalPositionClosedEventFilter =
    TypedEventFilter<NaturalPositionClosedEvent>;
  
  export interface NaturalPositionCreatedEventObject {
    collateralToken: string;
    collateralAmount: BigNumber;
    borrowToken: string;
    borrowAmount: BigNumber;
    interestRateMode: BigNumber;
    price: BigNumber;
  }
  export type NaturalPositionCreatedEvent = TypedEvent<
    [string, BigNumber, string, BigNumber, BigNumber, BigNumber],
    NaturalPositionCreatedEventObject
  >;
  
  export type NaturalPositionCreatedEventFilter =
    TypedEventFilter<NaturalPositionCreatedEvent>;
  
  export interface OwnershipTransferredEventObject {
    previousOwner: string;
    newOwner: string;
  }
  export type OwnershipTransferredEvent = TypedEvent<
    [string, string],
    OwnershipTransferredEventObject
  >;
  
  export type OwnershipTransferredEventFilter =
    TypedEventFilter<OwnershipTransferredEvent>;
  
  export interface GovHelper extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
  
    interface: GovHelperInterface;
  
    queryFilter<TEvent extends TypedEvent>(
      event: TypedEventFilter<TEvent>,
      fromBlockOrBlockhash?: string | number | undefined,
      toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>;
  
    listeners<TEvent extends TypedEvent>(
      eventFilter?: TypedEventFilter<TEvent>
    ): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(
      eventFilter: TypedEventFilter<TEvent>
    ): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
  
    functions: {
      borrowSwap(
        collateralToken: PromiseOrValue<string>,
        collateralAmount: PromiseOrValue<BigNumberish>,
        borrowToken: PromiseOrValue<string>,
        borrowAmount: PromiseOrValue<BigNumberish>,
        interestRateMode: PromiseOrValue<BigNumberish>,
        priceFeed: PromiseOrValue<string>,
        slippage: PromiseOrValue<BigNumberish>,
        poolFee: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
  
      owner(overrides?: CallOverrides): Promise<[string]>;
  
      poolAddressProvider(overrides?: CallOverrides): Promise<[string]>;
  
      priceFeedUsdc(overrides?: CallOverrides): Promise<[string]>;
  
      renounceOwnership(
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
  
      swapRepay(
        tokenIn: PromiseOrValue<string>,
        amountIn: PromiseOrValue<BigNumberish>,
        borrowToken: PromiseOrValue<string>,
        slippage: PromiseOrValue<BigNumberish>,
        poolFee: PromiseOrValue<BigNumberish>,
        priceFeed: PromiseOrValue<string>,
        interestRateMode: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
  
      swapRouter(overrides?: CallOverrides): Promise<[string]>;
  
      transferOwnership(
        newOwner: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
    };
  
    borrowSwap(
      collateralToken: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      borrowToken: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      interestRateMode: PromiseOrValue<BigNumberish>,
      priceFeed: PromiseOrValue<string>,
      slippage: PromiseOrValue<BigNumberish>,
      poolFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    owner(overrides?: CallOverrides): Promise<string>;
  
    poolAddressProvider(overrides?: CallOverrides): Promise<string>;
  
    priceFeedUsdc(overrides?: CallOverrides): Promise<string>;
  
    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    swapRepay(
      tokenIn: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      borrowToken: PromiseOrValue<string>,
      slippage: PromiseOrValue<BigNumberish>,
      poolFee: PromiseOrValue<BigNumberish>,
      priceFeed: PromiseOrValue<string>,
      interestRateMode: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    swapRouter(overrides?: CallOverrides): Promise<string>;
  
    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    callStatic: {
      borrowSwap(
        collateralToken: PromiseOrValue<string>,
        collateralAmount: PromiseOrValue<BigNumberish>,
        borrowToken: PromiseOrValue<string>,
        borrowAmount: PromiseOrValue<BigNumberish>,
        interestRateMode: PromiseOrValue<BigNumberish>,
        priceFeed: PromiseOrValue<string>,
        slippage: PromiseOrValue<BigNumberish>,
        poolFee: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<void>;
  
      owner(overrides?: CallOverrides): Promise<string>;
  
      poolAddressProvider(overrides?: CallOverrides): Promise<string>;
  
      priceFeedUsdc(overrides?: CallOverrides): Promise<string>;
  
      renounceOwnership(overrides?: CallOverrides): Promise<void>;
  
      swapRepay(
        tokenIn: PromiseOrValue<string>,
        amountIn: PromiseOrValue<BigNumberish>,
        borrowToken: PromiseOrValue<string>,
        slippage: PromiseOrValue<BigNumberish>,
        poolFee: PromiseOrValue<BigNumberish>,
        priceFeed: PromiseOrValue<string>,
        interestRateMode: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<void>;
  
      swapRouter(overrides?: CallOverrides): Promise<string>;
  
      transferOwnership(
        newOwner: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<void>;
    };
  
    filters: {
      "NaturalPositionClosed(address,uint256,address)"(
        tokenIn?: null,
        amountIn?: null,
        borrowToken?: null
      ): NaturalPositionClosedEventFilter;
      NaturalPositionClosed(
        tokenIn?: null,
        amountIn?: null,
        borrowToken?: null
      ): NaturalPositionClosedEventFilter;
  
      "NaturalPositionCreated(address,uint256,address,uint256,uint256,int256)"(
        collateralToken?: null,
        collateralAmount?: null,
        borrowToken?: null,
        borrowAmount?: null,
        interestRateMode?: null,
        price?: null
      ): NaturalPositionCreatedEventFilter;
      NaturalPositionCreated(
        collateralToken?: null,
        collateralAmount?: null,
        borrowToken?: null,
        borrowAmount?: null,
        interestRateMode?: null,
        price?: null
      ): NaturalPositionCreatedEventFilter;
  
      "OwnershipTransferred(address,address)"(
        previousOwner?: PromiseOrValue<string> | null,
        newOwner?: PromiseOrValue<string> | null
      ): OwnershipTransferredEventFilter;
      OwnershipTransferred(
        previousOwner?: PromiseOrValue<string> | null,
        newOwner?: PromiseOrValue<string> | null
      ): OwnershipTransferredEventFilter;
    };
  
    estimateGas: {
      borrowSwap(
        collateralToken: PromiseOrValue<string>,
        collateralAmount: PromiseOrValue<BigNumberish>,
        borrowToken: PromiseOrValue<string>,
        borrowAmount: PromiseOrValue<BigNumberish>,
        interestRateMode: PromiseOrValue<BigNumberish>,
        priceFeed: PromiseOrValue<string>,
        slippage: PromiseOrValue<BigNumberish>,
        poolFee: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
  
      owner(overrides?: CallOverrides): Promise<BigNumber>;
  
      poolAddressProvider(overrides?: CallOverrides): Promise<BigNumber>;
  
      priceFeedUsdc(overrides?: CallOverrides): Promise<BigNumber>;
  
      renounceOwnership(
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
  
      swapRepay(
        tokenIn: PromiseOrValue<string>,
        amountIn: PromiseOrValue<BigNumberish>,
        borrowToken: PromiseOrValue<string>,
        slippage: PromiseOrValue<BigNumberish>,
        poolFee: PromiseOrValue<BigNumberish>,
        priceFeed: PromiseOrValue<string>,
        interestRateMode: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
  
      swapRouter(overrides?: CallOverrides): Promise<BigNumber>;
  
      transferOwnership(
        newOwner: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
    };
  
    populateTransaction: {
      borrowSwap(
        collateralToken: PromiseOrValue<string>,
        collateralAmount: PromiseOrValue<BigNumberish>,
        borrowToken: PromiseOrValue<string>,
        borrowAmount: PromiseOrValue<BigNumberish>,
        interestRateMode: PromiseOrValue<BigNumberish>,
        priceFeed: PromiseOrValue<string>,
        slippage: PromiseOrValue<BigNumberish>,
        poolFee: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
  
      owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      poolAddressProvider(
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      priceFeedUsdc(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      renounceOwnership(
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
  
      swapRepay(
        tokenIn: PromiseOrValue<string>,
        amountIn: PromiseOrValue<BigNumberish>,
        borrowToken: PromiseOrValue<string>,
        slippage: PromiseOrValue<BigNumberish>,
        poolFee: PromiseOrValue<BigNumberish>,
        priceFeed: PromiseOrValue<string>,
        interestRateMode: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
  
      swapRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      transferOwnership(
        newOwner: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
    };
  }
  