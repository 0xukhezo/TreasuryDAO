// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class NaturalPositionClosed extends ethereum.Event {
  get params(): NaturalPositionClosed__Params {
    return new NaturalPositionClosed__Params(this);
  }
}

export class NaturalPositionClosed__Params {
  _event: NaturalPositionClosed;

  constructor(event: NaturalPositionClosed) {
    this._event = event;
  }

  get tokenIn(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amountIn(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get borrowToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class NaturalPositionCreated extends ethereum.Event {
  get params(): NaturalPositionCreated__Params {
    return new NaturalPositionCreated__Params(this);
  }
}

export class NaturalPositionCreated__Params {
  _event: NaturalPositionCreated;

  constructor(event: NaturalPositionCreated) {
    this._event = event;
  }

  get collateralToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get collateralAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get borrowToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get borrowAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get interestRateMode(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class GovHelper extends ethereum.SmartContract {
  static bind(address: Address): GovHelper {
    return new GovHelper("GovHelper", address);
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  poolAddressProvider(): Address {
    let result = super.call(
      "poolAddressProvider",
      "poolAddressProvider():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_poolAddressProvider(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "poolAddressProvider",
      "poolAddressProvider():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  priceFeedUsdc(): Address {
    let result = super.call("priceFeedUsdc", "priceFeedUsdc():(address)", []);

    return result[0].toAddress();
  }

  try_priceFeedUsdc(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "priceFeedUsdc",
      "priceFeedUsdc():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  swapRouter(): Address {
    let result = super.call("swapRouter", "swapRouter():(address)", []);

    return result[0].toAddress();
  }

  try_swapRouter(): ethereum.CallResult<Address> {
    let result = super.tryCall("swapRouter", "swapRouter():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _poolAddressProvider(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _swapRouter(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _priceFeedUsdc(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BorrowSwapCall extends ethereum.Call {
  get inputs(): BorrowSwapCall__Inputs {
    return new BorrowSwapCall__Inputs(this);
  }

  get outputs(): BorrowSwapCall__Outputs {
    return new BorrowSwapCall__Outputs(this);
  }
}

export class BorrowSwapCall__Inputs {
  _call: BorrowSwapCall;

  constructor(call: BorrowSwapCall) {
    this._call = call;
  }

  get collateralToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get collateralAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get borrowToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get borrowAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get interestRateMode(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get priceFeed(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get slippage(): i32 {
    return this._call.inputValues[6].value.toI32();
  }

  get poolFee(): i32 {
    return this._call.inputValues[7].value.toI32();
  }
}

export class BorrowSwapCall__Outputs {
  _call: BorrowSwapCall;

  constructor(call: BorrowSwapCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SwapRepayCall extends ethereum.Call {
  get inputs(): SwapRepayCall__Inputs {
    return new SwapRepayCall__Inputs(this);
  }

  get outputs(): SwapRepayCall__Outputs {
    return new SwapRepayCall__Outputs(this);
  }
}

export class SwapRepayCall__Inputs {
  _call: SwapRepayCall;

  constructor(call: SwapRepayCall) {
    this._call = call;
  }

  get tokenIn(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amountIn(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get borrowToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get slippage(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get poolFee(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get priceFeed(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get interestRateMode(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class SwapRepayCall__Outputs {
  _call: SwapRepayCall;

  constructor(call: SwapRepayCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
